/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/


process {

    withName:'BEDTOOLS_GENOMECOV|BINNING|BINNING_SUMMARY|COUNT_KMERS|EMBED_KMERS|MAJORITY_VOTE|MARKERS|MOCK_DATA_REPORT|NORMALIZE_KMERS|PARSE_BED|PRODIGAL|REDUCE_LCA|SAMPLESHEET_CHECK|SPLIT_KINGDOMS|UNCLUSTERED_RECRUIT'{
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: params.publish_dir_mode
        ]
    }
    withName:'ALIGN_READS'{
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: params.publish_dir_mode
        ]
        ext.args = ''
        ext.args2 = '-q --phred33 --very-sensitive --no-unal'
    }
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.tracedir}" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
    withName:'DIAMOND_BLASTP'{
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: params.publish_dir_mode
        ]
        ext.args = '--evalue 1e-5 --max-hsps 1 --max-target-seqs 200 -b 6 --outfmt 6'
    }
    withName:'DIAMOND_MAKEDB'{
        storeDir = {"${params.nr_dmnd_dir}"}
    }
    withName:'DOWNLOAD_ACESSION2TAXID'{
        storeDir = {"${params.prot_accession2taxid_gz_dir}"}
    }
    withName:'DOWNLOAD_NR'{
        storeDir = {"${params.nr_dmnd_dir}"}
    }
    withName:'DOWNLOAD_TAXDUMP'{
        storeDir = {"${params.taxdump_tar_gz_dir}"}
    }
    withName:'GET_GENOMES_FOR_MOCK'{
        storeDir = { "${params.outdir}/mock_data/genomes"}
        ext.args = 'https://ftp.ncbi.nlm.nih.gov/genomes/ASSEMBLY_REPORTS/assembly_summary_refseq.txt'
        // Example 1
        //ext.args2 = 'GCF_000734955.1|GCF_900448115.1|GCF_015751765.1'
        // Example 2
        ext.args2 = 'GCF_000005845.2|GCF_000166095.1|GCF_000280035.1|GCF_000812185.1|GCF_012955605.1|GCF_013364095.1|GCF_016904755.1|GCF_021216675.1|GCF_023169545.1|GCF_900475885.1'
    }
    withName:'PREP_DBS'{
        storeDir = {"${params.lca_dir}"}
    }
    withName:'SEQKIT_FILTER'{
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: params.publish_dir_mode
        ]
        // `seqkit seq -i` "print ID instead of full head"
        ext.args = '-i'
        // If you run out of memory sorting, use `--two-pass`
        ext.args2 = ''
    }
    withName:'SPADES_KMER_COVERAGE'{
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
            mode: params.publish_dir_mode,
            pattern: '*.coverages.tsv'
        ]
        ext.when = meta.cov_from_assembly.equals('spades')
    }
}
