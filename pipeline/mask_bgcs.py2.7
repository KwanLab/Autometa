#!/usr/bin/env python2

#1. Retrieve each cluster
#2. From each BGC retrieve scaffold id and BGC location on scaffold
#3. Mask domains according to being located within BGC
#4. Mask domains partially covered by BGC...Alter blast table passed to lca?
#5. Mask ORFs prior to determining LCA or split LCA table according to orfs in/out BGCs
#6. Plug into add_contig_taxonomy.py in pipeline...


from os.path import realpath,relpath,basename,abspath,splitext

from glob import glob
import argparse
from Bio import SeqIO

parser = argparse.ArgumentParser(description='Splits ORFS using information from\
 AntiSMASH annotations')
parser.add_argument('--bgc', help='AntiSMASH output', metavar='<dir>', required=True)
parser.add_argument('--lca', help='LCA table', metavar='<file>', required=True)
parser.add_argument('--orfs', metavar='<file>', required=True,
    help='ORFs fasta (Autometa: <*.orfs.faa>)')
parser.add_argument('--name', help='Output name', metavar='<str>', required=False)

#: Inputs
args = vars(parser.parse_args())
antismash_bgcs = realpath(args['bgc']) + '/*cluster*.gbk'
orfs_faa = args['orfs']
table = args['lca']
outname = args['name']
#outdir = args['out']
#: Writes output to directory of input lca file
#orfs_faa = realpath('../Bacteria_filtered.orfs.faa')
#table = realpath('../Bacteria_filtered.orfs.tab')

def get_orfs_info(orfs_faa_path):
    """Returns dict of ORFs location and GC content from header in ORFs faa file"""
    records = SeqIO.to_dict(SeqIO.parse(orfs_faa_path, 'fasta'))
    orfs_dict = {}
    for orf in records:
        name = records[orf].name
        gc = records[orf].description.split(';')[-1]
        gc = gc.lstrip('gc_cont=')
        start, end = records[orf].description.split('#')[1:3]
        start, end = int(start.strip()), int(end.strip())
        orfs_dict[name] = {'gc': gc, 'location': (start, end)}
    return orfs_dict

def get_bgc_info(bgc_clusters):
    """Returns dict of scaffolds with list of BGCs locations"""
    bgc_dict = {}
    for bgc in bgc_clusters:
        for record in SeqIO.parse(bgc, 'genbank'):
            scaffold = record.description
            location = [feature.location for feature in record.features
                if feature.type == 'cluster'][0]
            if scaffold in bgc_dict:
                bgc_dict[scaffold].append(location)
            else:
                bgc_dict[scaffold] = [location]
    return bgc_dict

def in_bgc(location_tuple, bgc_locations):
    """Returns True if orf located in a BGC else returns False"""
    orf_start, orf_end = location_tuple
    for location_feature in bgc_locations:
        bgc_start, bgc_end = location_feature.start, location_feature.end
        if bgc_start <= orf_start <= bgc_end:
            return True
        if bgc_start <= orf_end <= bgc_end:
            return True
    return False

def split_orfs(table_path, orfs_dict, bgc_dict, outfile=None):
    orfs_dir_path = realpath(table_path).rstrip(relpath(table_path))
    if outfile:
        orfs_out_path = orfs_dir_path + outfile + '.unmasked.tsv'
        orfs_in_path = orfs_dir_path + outfile + '.masked.tsv'
    else:
        outfname, _ = splitext(basename(table_path))
        orfs_out_path = '{}/{}.unmasked.tsv'.format(orfs_dir_path, outfname)
        orfs_in_path = '{}/{}.masked.tsv'.format(orfs_dir_path, outfname)
    orfs_out = open(orfs_out_path, 'w')
    orfs_in = open(orfs_in_path, 'w')
    orfs_out_set = set()
    orfs_in_set = set()
    with open(table_path) as fh:
        for line in fh:
            orf = line.split()[0]
            scaffold = '_'.join(orf.rsplit('_')[:-1])
            if scaffold in bgc_dict:
                bgc_locations = bgc_dict[scaffold]
                orf_location = orfs_dict[orf]['location']
                if in_bgc(orf_location, bgc_locations):
                    orfs_in.write(line)
                    orfs_in_set.add(orf)
                    continue
            orfs_out.write(line)
            orfs_out_set.add(orf)
    orfs_out.close()
    orfs_in.close()
    return orfs_in_set, orfs_out_set

bgcs = glob(antismash_bgcs)
bgc_info = get_bgc_info(bgcs)
print('Masking {0} BGCs onto {1} scaffolds in bacteria metagenome'
    .format(len(bgcs), len(bgc_info)))

orfs = get_orfs_info(orfs_faa)
if outname:
    lca_orfs_in, lca_orfs_out = split_orfs(table, orfs, bgc_info, outname)
else:
    lca_orfs_in, lca_orfs_out = split_orfs(table, orfs, bgc_info)
